/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import CrudsAdmin.crud_project;
import CrudsAdmin.crud_tasks;
import CrudsAdmin.crud_users;
import config.Session;
import java.awt.Color;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import config.dbConnector;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author SCC-COLLEGE
 */
public class Taskpage extends javax.swing.JInternalFrame {

    /**
     * Creates new form Userpage
     */
    public Taskpage() {
        initComponents();
        
        displayData();
        
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        
        searchBar.setOpaque(false);
        searchBar.setBackground(new Color(0,0,0,0));
    }
    
    public void displayData() {
    dbConnector dbc = null;
    ResultSet rs = null;

    try {
        dbc = new dbConnector();

        String sql = "SELECT t.t_id, p.p_name, p.p_salary, p.p_description, u.u_fname AS maker_name, " +
                     "assignee.u_fname AS assign_user, p.p_date, p.p_duedate, t.t_status " +
                     "FROM tbl_task t " +
                     "JOIN tbl_project p ON t.p_id = p.p_id " +
                     "JOIN tbl_users u ON t.u_id = u.u_id " +  // maker of project
                     "LEFT JOIN tbl_users assignee ON t.user_assign = assignee.u_id"; // assigned user

        rs = dbc.getData(sql);
        userTable.setModel(DbUtils.resultSetToTableModel(rs));

        // Explicit column headers
        String[] headers = {
            "Task ID", "Project Name", "Salary", "Description", "Maker Name",
            "Assigned User", "Start Date", "Due Date", "Status"
        };

        for (int i = 0; i < headers.length; i++) {
            if (i < userTable.getColumnModel().getColumnCount()) {
                userTable.getColumnModel().getColumn(i).setHeaderValue(headers[i]);
            }
        }

        // Enable scrolling
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);

        // Set column widths for better layout
        userTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        int[] columnWidths = {60, 120, 80, 150, 100, 120, 90, 90, 100};
        for (int i = 0; i < columnWidths.length; i++) {
            if (i < userTable.getColumnModel().getColumnCount()) {
                userTable.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
            }
        }

        userTable.getTableHeader().repaint();
        rs.close();

    } catch (SQLException ex) {
        System.out.println("Errors: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (dbc != null && dbc.connect != null && !dbc.connect.isClosed()) dbc.connect.close();
        } catch (SQLException e) {
            System.out.println("Error closing resources: " + e.getMessage());
        }
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        editbutton = new javax.swing.JButton();
        deletebutton = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, -1, -1));

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        editbutton.setText("EDIT");
        editbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbuttonActionPerformed(evt);
            }
        });
        jPanel1.add(editbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, -1, -1));

        deletebutton.setText("DELETE");
        deletebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebuttonActionPerformed(evt);
            }
        });
        jPanel1.add(deletebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        searchBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchBar.setMinimumSize(new java.awt.Dimension(8, 20));
        searchBar.setPreferredSize(new java.awt.Dimension(8, 20));
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        jPanel1.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 240, 23));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 520, 250));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("TASK PAGE");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Untitled Project.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 380));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        searchButtonActionPerformed(evt);
    }//GEN-LAST:event_searchBarActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       crud_tasks at = new crud_tasks();
        at.setVisible(true);       
        at.loadProjectNames();
        at.loadAssignUsers();
        at.pname.setEnabled(true);    // Enable combo box
        at.add.setEnabled(true);       // Enable Add button
        at.update.setEnabled(false);   // Disable Update button

        JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);
        parent.dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
                String keyword = searchBar.getText().trim();
        if(keyword.isEmpty()){
            displayData(); // Show all if search is empty
            return;
        }
        try {
            dbConnector dbc = new dbConnector();
            // Properly join tables for search on related columns
            String query = "SELECT t.t_id, p.p_name, p.p_description, u.u_fname, t.user_assign, t.t_date, t.t_duedate, t.t_status " +
                           "FROM tbl_task t " +
                           "JOIN tbl_project p ON t.p_id = p.p_id " +
                           "JOIN tbl_users u ON t.u_id = u.u_id " +
                           "WHERE u.u_fname LIKE ? " +
                           "OR p.p_name LIKE ? " +
                           "OR t.t_id LIKE ? " +
                           "OR t.user_assign LIKE ? " +
                           "OR p.p_id LIKE ?";

            PreparedStatement pst = dbc.connect.prepareStatement(query);
            String likeKeyword = "%" + keyword + "%";
            for (int i = 1; i <= 5; i++) {
                pst.setString(i, likeKeyword);
            }
            ResultSet rs = pst.executeQuery();

            if (!rs.isBeforeFirst()) {
                javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
                model.setColumnIdentifiers(new String[]{"Message"});
                model.addRow(new Object[]{"No results found for \"" + keyword + "\""});
                userTable.setModel(model);
            } else {
                userTable.setModel(DbUtils.resultSetToTableModel(rs));
                // Reset headers after search too
                userTable.getColumnModel().getColumn(0).setHeaderValue("Task ID");
                userTable.getColumnModel().getColumn(1).setHeaderValue("Project Name");
                userTable.getColumnModel().getColumn(2).setHeaderValue("Description");
                userTable.getColumnModel().getColumn(3).setHeaderValue("Maker Name");
                userTable.getColumnModel().getColumn(4).setHeaderValue("Assign User");
                userTable.getColumnModel().getColumn(5).setHeaderValue("Start Date");
                userTable.getColumnModel().getColumn(6).setHeaderValue("Due Date");
                userTable.getColumnModel().getColumn(7).setHeaderValue("Status");
                userTable.getTableHeader().repaint();
            }
            rs.close();
            pst.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void editbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbuttonActionPerformed
 int rowIndex = userTable.getSelectedRow();
        if (rowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a task to edit.");
            return;
        }

        try {
            TableModel model = userTable.getModel();
            int taskIdToEdit = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());

            Session session = Session.getInstance();
            session.setT_id(taskIdToEdit);

            dbConnector dbc = new dbConnector();

            String sql = "SELECT t.*, p.p_name, p.p_salary, p.p_date, p.p_duedate, u.u_fname " +
                         "FROM tbl_task t " +
                         "JOIN tbl_project p ON t.p_id = p.p_id " +
                         "JOIN tbl_users u ON t.u_id = u.u_id " +
                         "WHERE t.t_id = ?";
            PreparedStatement pst = dbc.connect.prepareStatement(sql);
            pst.setInt(1, taskIdToEdit);
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                crud_tasks at = new crud_tasks();

                final String projectName = rs.getString("p_name");
                final int assignId = rs.getInt("user_assign");
                final String projectSalary = rs.getString("p_salary");
                final String taskStatus = rs.getString("t_status");
                final java.util.Date startDate = rs.getDate("p_date");
                final java.util.Date dueDate = rs.getDate("p_duedate");
                final String makerName = rs.getString("u_fname");

                at.loadProjectNames();
                at.loadAssignUsers();

                // Set text fields and combo boxes
                at.salary.setText(projectSalary);
                at.umaker.setText(makerName);
                at.date.setDate(startDate);
                at.due.setDate(dueDate);
                at.status.setSelectedItem(taskStatus);
                at.t_id.setText(String.valueOf(taskIdToEdit));

                // Disable project selection in edit mode and set selected project
                at.pname.setSelectedItem(projectName);
                at.pname.setEnabled(false);

                at.add.setEnabled(false);
                at.update.setEnabled(true);

                SwingUtilities.invokeLater(() -> {
                    try {
                        PreparedStatement pstUser = dbc.connect.prepareStatement(
                            "SELECT u_fname FROM tbl_users WHERE u_id = ?");
                        pstUser.setInt(1, assignId);
                        ResultSet rsUser = pstUser.executeQuery();
                        if (rsUser.next()) {
                            String assignedName = rsUser.getString("u_fname");
                            boolean foundUser = false;
                            for (int i = 0; i < at.assignuser.getItemCount(); i++) {
                                if (at.assignuser.getItemAt(i).equalsIgnoreCase(assignedName)) {
                                    at.assignuser.setSelectedIndex(i);
                                    foundUser = true;
                                    break;
                                }
                            }
                            if (!foundUser) {
                                at.assignuser.addItem(assignedName);
                                at.assignuser.setSelectedItem(assignedName);
                            }
                        }
                        rsUser.close();
                        pstUser.close();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                });

                at.setVisible(true);
                JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);
                parent.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Error: Task not found.");
            }

            rs.close();
            pst.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error loading task: " + ex.getMessage());
            ex.printStackTrace();
        }    
    }//GEN-LAST:event_editbuttonActionPerformed

    private void deletebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebuttonActionPerformed
        int rowIndex = userTable.getSelectedRow();
        if (rowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a task to delete.");
            return;
        }
        TableModel model = userTable.getModel();
        int taskIdToDelete = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());

        int confirm = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete this task?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                dbConnector dbc = new dbConnector();
                String query = "DELETE FROM tbl_task WHERE t_id = ?";
                PreparedStatement pst = dbc.connect.prepareStatement(query);
                pst.setInt(1, taskIdToDelete);
                int deleted = pst.executeUpdate();
                pst.close();
                if (deleted > 0) {
                    JOptionPane.showMessageDialog(null, "Task deleted successfully!");
                    displayData();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to delete task.");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_deletebuttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deletebutton;
    private javax.swing.JButton editbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    public javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
