/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CrudsAdmin;

import Admin.AdminDashboard;
import Admin.Projectpage;
import Admin.Taskpage;
import config.dbConnector;
import Admin.Userpage;
import config.Session;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import myApp.LoginForm;


/**
 *
 * @author PC15
 */
public class crud_tasks extends javax.swing.JFrame {   
    public crud_tasks() {
        initComponents();
        populateComboBoxes();
    }
    private void populateComboBoxes() {
    dbConnector db = new dbConnector();
    try {
        String sqlProjects = "SELECT p_name FROM tbl_project"; 
        ResultSet rsProjects = db.getData(sqlProjects);
        DefaultComboBoxModel<String> projectModel = new DefaultComboBoxModel<>();
        projectModel.addElement("Select Project");
        while (rsProjects.next()) {
            String projectName = rsProjects.getString("p_name");
            projectModel.addElement(projectName);
            System.out.println("Project Name loaded: " + projectName);
        }
        pname.setModel(projectModel);
        String sqlUsers = "SELECT u_fname FROM tbl_users"; 
        ResultSet rsUsers = db.getData(sqlUsers);
        DefaultComboBoxModel<String> userModel = new DefaultComboBoxModel<>();
        userModel.addElement("Select User");
        while (rsUsers.next()) {
            String userName = rsUsers.getString("u_fname");
            userModel.addElement(userName);
            System.out.println("User Name loaded: " + userName);
        }
        assignuser.setModel(userModel);
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error fetching data: " + ex.getMessage());
    }
}    
       

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        status = new javax.swing.JComboBox<>();
        add = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        assign_name = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        due = new com.toedter.calendar.JDateChooser();
        update = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        pname = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        t_id = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        user_id = new javax.swing.JTextField();
        umaker = new javax.swing.JTextField();
        assignuser = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        salary = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jLabel9.setText("jLabel9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(51, 255, 153));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "Active", "Not Active", "Completed" }));
        jPanel2.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 291, 220, 30));

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jPanel2.add(add, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 327, 81, 28));

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        jPanel2.add(cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(279, 361, 81, 28));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Start Date:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 222, 120, 26));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Due Date:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 256, 120, 26));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Maker ID");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 57, 120, 26));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Status:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 292, 120, 26));

        assign_name.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        assign_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        assign_name.setText("Assign Name:");
        jPanel2.add(assign_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 120, 26));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Project Name:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 92, 120, 26));
        jPanel2.add(date, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 222, 220, 28));
        jPanel2.add(due, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 256, 220, 29));

        update.setText("Update");
        update.setEnabled(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel2.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(279, 327, 81, 28));

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPanel2.add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 361, 81, 28));

        pname.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Project", "Item 2", "Item 3", "Item 4" }));
        pname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pnameActionPerformed(evt);
            }
        });
        jPanel2.add(pname, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 92, 220, 26));

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("task_id");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 21, 110, 26));

        t_id.setEnabled(false);
        jPanel2.add(t_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 220, 30));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Maker Name:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 157, 120, 26));

        user_id.setEnabled(false);
        jPanel2.add(user_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 56, 220, 30));

        umaker.setEnabled(false);
        jPanel2.add(umaker, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 220, 25));

        assignuser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User", "Item 2", "Item 3", "Item 4" }));
        assignuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignuserActionPerformed(evt);
            }
        });
        jPanel2.add(assignuser, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 220, 26));

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Salary:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 120, 26));

        salary.setEnabled(false);
        salary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryActionPerformed(evt);
            }
        });
        jPanel2.add(salary, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 220, 25));

        jPanel1.add(jPanel2);
        jPanel2.setBounds(290, 20, 370, 400);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ADD TASK FORM");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 30, 220, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Untitled Project.jpg"))); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 680, 450);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
    String p_name = (String) pname.getSelectedItem();
    String t_status = (String) status.getSelectedItem();
    java.util.Date t_date = date.getDate();
    java.util.Date t_duedate = due.getDate();

    if (p_name.equals("Select Project") || t_status.equals("SELECT") || t_date == null || t_duedate == null) {
        JOptionPane.showMessageDialog(null, "Please fill in all required fields.");
        return;
    }

    java.util.Date currentDate = new java.util.Date();
    if (t_date.before(currentDate)) {
        JOptionPane.showMessageDialog(null, "Start date cannot be earlier than the current date.");
        return;
    }

    if (t_duedate.before(t_date)) {
        JOptionPane.showMessageDialog(null, "Due date cannot be earlier than the start date.");
        return;
    }

    java.sql.Date sqlt_date = new java.sql.Date(t_date.getTime());
    java.sql.Date sqlt_duedate = new java.sql.Date(t_duedate.getTime());

    Session session = Session.getInstance();
    int creatorId = session.getU_id();
    String creatorName = session.getU_fname();
    String u_fname = (creatorName != null) ? creatorName : "Unknown";
    String p_salary = "0"; // TODO: Set salary properly if needed

    dbConnector db = new dbConnector();

    try {
        int p_id = -1;

        String getPidQuery = "SELECT p_id FROM tbl_project WHERE p_name = ?";
        try (PreparedStatement pst = db.connect.prepareStatement(getPidQuery)) {
            pst.setString(1, p_name);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                p_id = rs.getInt("p_id");
            } else {
                JOptionPane.showMessageDialog(null, "Project not found.");
                return;
            }
        }

        String assignUser = (String) assignuser.getSelectedItem();
        String userAssign = (assignUser != null && !assignUser.trim().isEmpty() && !assignUser.equals("Select User")) ? assignUser : "";

        if (!userAssign.isEmpty()) {
            String checkUserQuery = "SELECT COUNT(*) FROM tbl_users WHERE u_fname = ?";
            try (PreparedStatement pst = db.connect.prepareStatement(checkUserQuery)) {
                pst.setString(1, userAssign);
                ResultSet rs = pst.executeQuery();
                if (!rs.next() || rs.getInt(1) == 0) {
                    JOptionPane.showMessageDialog(null, "Assigned user does not exist.");
                    return;
                }
            }
        }

        String insertQuery = "INSERT INTO tbl_task (p_id, u_id, p_name, p_salary, u_fname, user_assign, t_date, t_duedate, t_status, accept) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstInsert = db.connect.prepareStatement(insertQuery)) {
            pstInsert.setInt(1, p_id);
            pstInsert.setInt(2, creatorId);
            pstInsert.setString(3, p_name);
            pstInsert.setString(4, p_salary);
            pstInsert.setString(5, u_fname);
            pstInsert.setString(6, userAssign);
            pstInsert.setDate(7, sqlt_date);
            pstInsert.setDate(8, sqlt_duedate);
            pstInsert.setString(9, t_status);
            pstInsert.setString(10, !userAssign.isEmpty() ? "Accepted" : "Pending");

            int rowsAffected = pstInsert.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Task added successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Error adding task.");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
        e.printStackTrace();
    } finally {
        try {
            if (db.connect != null && !db.connect.isClosed()) {
                db.connect.close();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing database connection: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_addActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
         Session sess = Session.getInstance();
    if (sess.getU_id() == 0) {
        JOptionPane.showMessageDialog(null, "No Account. Login First!");
        LoginForm lf = new LoginForm();
        lf.setVisible(true);
        this.dispose();
        return;
    }
    populateComboBoxes();
    pname.setSelectedItem(String.valueOf(sess.getP_name()));
    user_id.setText(String.valueOf(sess.getU_id()));
    t_id.setText(String.valueOf(sess.getT_id()));
    assignuser.setSelectedItem("");
    String sessionProjectName = sess.getP_name();
    if (sessionProjectName != null && !sessionProjectName.trim().isEmpty()) {
        boolean projectMatchFound = false;
        for (int i = 0; i < pname.getItemCount(); i++) {
            String item = pname.getItemAt(i).toString().trim();
            if (item.equalsIgnoreCase(sessionProjectName.trim())) {
                pname.setSelectedItem(item);
                projectMatchFound = true;
                break;
            }
        }
        if (!projectMatchFound) {
            pname.addItem(sessionProjectName);
            pname.setSelectedItem(sessionProjectName);
        }
    } else {
        pname.setSelectedItem("Select Project");
    }
    String sessionUserFname = sess.getU_fname();
    if (sessionUserFname != null && !sessionUserFname.trim().isEmpty()) {
        umaker.setText(sessionUserFname);
    } else {
        umaker.setText("");
    }
    pname.repaint();
    umaker.repaint();
    }//GEN-LAST:event_formWindowActivated

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        AdminDashboard ads = new AdminDashboard();
            ads.setVisible(true);
            Taskpage tp = new Taskpage();
            tp.setVisible(true);
            ads.mainDesktop.add(tp);
            this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
      if (t_id.getText().isEmpty() || pname.getSelectedItem().equals("Select Project") ||
        umaker.getText().isEmpty() || date.getDate() == null ||
        due.getDate() == null || status.getSelectedItem().equals("SELECT")) {

        JOptionPane.showMessageDialog(null, "All fields are required and status must be selected!");
        return;
    }

    dbConnector db = new dbConnector();

    try {
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(date.getDate());
        String formattedDueDate = sdf.format(due.getDate());
        String selectedProject = (String) pname.getSelectedItem();
        String currentuser = umaker.getText().trim();
        String selectedUser = (String) assignuser.getSelectedItem();

        int p_id = -1;
        int u_id = -1;

        String getPidQuery = "SELECT p_id FROM tbl_project WHERE p_name = ?";
        try (PreparedStatement pst = db.connect.prepareStatement(getPidQuery)) {
            pst.setString(1, selectedProject);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                p_id = rs.getInt("p_id");
            } else {
                JOptionPane.showMessageDialog(null, "Project not found.");
                return;
            }
        }

        String getUidQuery = "SELECT u_id FROM tbl_users WHERE u_fname = ?";
        try (PreparedStatement pst = db.connect.prepareStatement(getUidQuery)) {
            pst.setString(1, currentuser);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                u_id = rs.getInt("u_id");
            } else {
                JOptionPane.showMessageDialog(null, "User not found.");
                return;
            }
        }

        String sql = "UPDATE tbl_task SET p_id = ?, u_id = ?, p_name = ?, u_fname = ?, user_assign = ?, " +
                     "t_date = ?, t_duedate = ?, t_status = ?, accept = CASE WHEN user_assign IS NOT NULL THEN 'Accepted' ELSE 'Pending' END " +
                     "WHERE t_id = ?";
        try (PreparedStatement pst = db.connect.prepareStatement(sql)) {
            pst.setInt(1, p_id);
            pst.setInt(2, u_id);
            pst.setString(3, selectedProject);
            pst.setString(4, currentuser);
            pst.setString(5, selectedUser);
            pst.setString(6, formattedDate);
            pst.setString(7, formattedDueDate);
            pst.setString(8, status.getSelectedItem().toString());
            pst.setInt(9, Integer.parseInt(t_id.getText()));

            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Task updated successfully!");
                AdminDashboard ads = new AdminDashboard();
                ads.setVisible(true);
                Taskpage pp = new Taskpage();
                ads.mainDesktop.add(pp);
                pp.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update task.");
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
        ex.printStackTrace();
    } finally {
        try {
            if (db.connect != null && !db.connect.isClosed()) {
                db.connect.close();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing database connection: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_updateActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
         pname.setSelectedItem("");
    }//GEN-LAST:event_clearActionPerformed

    private void pnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnameActionPerformed
       
    }//GEN-LAST:event_pnameActionPerformed

    private void assignuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignuserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_assignuserActionPerformed

    private void salaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(crud_tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(crud_tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(crud_tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(crud_tasks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new crud_tasks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton add;
    private javax.swing.JLabel assign_name;
    public javax.swing.JComboBox<String> assignuser;
    private javax.swing.JButton cancel;
    private javax.swing.JButton clear;
    public com.toedter.calendar.JDateChooser date;
    public com.toedter.calendar.JDateChooser due;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JComboBox<String> pname;
    public javax.swing.JTextField salary;
    public javax.swing.JComboBox<String> status;
    public javax.swing.JTextField t_id;
    public javax.swing.JTextField umaker;
    public javax.swing.JButton update;
    public javax.swing.JTextField user_id;
    // End of variables declaration//GEN-END:variables
}
