/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Printer;

import CrudsAdmin.crud_tasks;
import config.Session;
import java.awt.Color;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import config.dbConnector;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author SCC-COLLEGE
 */
public class print extends javax.swing.JInternalFrame {

    /**
     * Creates new form Userpage
     */
    public print() {
        initComponents();
        
        displayData();
        
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        
        searchBar.setOpaque(false);
        searchBar.setBackground(new Color(0,0,0,0));
    }
    
    public void displayData() {
        dbConnector dbc = null;
        ResultSet rs = null;
        PreparedStatement pst = null;

        try {
            dbc = new dbConnector();
            String sql = "SELECT t.t_id, p.p_name, p.p_salary, u.u_fname AS maker_name, " +
                         "assignee.u_fname AS assign_user, assignee.u_gender, assignee.u_contact, " +
                         "assignee.u_email, t.t_status " +
                         "FROM tbl_task t " +
                         "JOIN tbl_project p ON t.p_id = p.p_id " +
                         "JOIN tbl_users u ON t.u_id = u.u_id " +
                         "LEFT JOIN tbl_users assignee ON t.user_assign = assignee.u_id";
            pst = dbc.connect.prepareStatement(sql);
            rs = pst.executeQuery();
            userTable.setModel(DbUtils.resultSetToTableModel(rs));

            String[] headers = {
                "Task ID", "Project Name", "Salary", "Maker Name",
                "Assigned User", "Gender", "Contact", "Email", "Status"
            };

            for (int i = 0; i < headers.length; i++) {
                if (i < userTable.getColumnModel().getColumnCount()) {
                    userTable.getColumnModel().getColumn(i).setHeaderValue(headers[i]);
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (dbc != null && dbc.connect != null && !dbc.connect.isClosed()) dbc.connect.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        print = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, -1, -1));

        print.setText("PRINT");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        jPanel1.add(print, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        refresh.setText("REFRESH");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        jPanel1.add(refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));

        searchBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchBar.setMinimumSize(new java.awt.Dimension(8, 20));
        searchBar.setPreferredSize(new java.awt.Dimension(8, 20));
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        jPanel1.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 240, 23));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 520, 250));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("TASK PAGE");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Untitled Project.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 380));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        searchButtonActionPerformed(evt);
    }//GEN-LAST:event_searchBarActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String keyword = searchBar.getText().trim();
        if(keyword.isEmpty()){
            displayData(); // Show all if search is empty
            return;
        }
        dbConnector dbc = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            dbc = new dbConnector();
            String query = "SELECT t.t_id, p.p_name, p.p_description, u.u_fname, t.user_assign, t.t_date, t.t_duedate, t.t_status " +
                           "FROM tbl_task t " +
                           "JOIN tbl_project p ON t.p_id = p.p_id " +
                           "JOIN tbl_users u ON t.u_id = u.u_id " +
                           "WHERE u.u_fname LIKE ? " +
                           "OR p.p_name LIKE ? " +
                           "OR t.t_id LIKE ? " +
                           "OR t.user_assign LIKE ? " +
                           "OR p.p_id LIKE ?";

            pst = dbc.connect.prepareStatement(query);
            String likeKeyword = "%" + keyword + "%";
            for (int i = 1; i <= 5; i++) {
                pst.setString(i, likeKeyword);
            }
            rs = pst.executeQuery();

            if (!rs.isBeforeFirst()) {
                javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
                model.setColumnIdentifiers(new String[]{"Message"});
                model.addRow(new Object[]{"No results found for \"" + keyword + "\""});
                userTable.setModel(model);
            } else {
                userTable.setModel(DbUtils.resultSetToTableModel(rs));
                String[] headers = {"Task ID", "Project Name", "Description", "Maker Name", "Assign User", "Start Date", "Due Date", "Status"};
                for (int i = 0; i < headers.length; i++) {
                    if (i < userTable.getColumnModel().getColumnCount()) {
                        userTable.getColumnModel().getColumn(i).setHeaderValue(headers[i]);
                    }
                }
                userTable.getTableHeader().repaint();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (dbc != null && dbc.connect != null && !dbc.connect.isClosed()) dbc.connect.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
             displayData();
    }//GEN-LAST:event_refreshActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
int rowIndex = userTable.getSelectedRow();
        if (rowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a task to print.");
            return;
        }

        dbConnector dbc = null;
        PreparedStatement pst = null;
        ResultSet rs = null;

        try {
            TableModel model = userTable.getModel();
            int taskIdToEdit = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());

            Session session = Session.getInstance();
            session.setT_id(taskIdToEdit);

            dbc = new dbConnector();

            String sql = "SELECT t.*, p.p_name, p.p_salary, u.u_fname AS maker_name, " +
                         "assignee.u_gender, assignee.u_contact, assignee.u_email " +
                         "FROM tbl_task t " +
                         "JOIN tbl_project p ON t.p_id = p.p_id " +
                         "JOIN tbl_users u ON t.u_id = u.u_id " +
                         "LEFT JOIN tbl_users assignee ON t.user_assign = assignee.u_id " +
                         "WHERE t.t_id = ?";
            pst = dbc.connect.prepareStatement(sql);
            pst.setInt(1, taskIdToEdit);
            rs = pst.executeQuery();

            if (rs.next()) {
                String t_id = String.valueOf(taskIdToEdit); // Fix here
                String pname = rs.getString("p_name");
                String assignuser = rs.getString("maker_name"); // note alias "maker_name"
                String gender = rs.getString("u_gender");
                String contact = rs.getString("u_contact");
                String email = rs.getString("u_email");
                String salary = rs.getString("p_salary");
                String status = rs.getString("t_status");                             
            } else {
                JOptionPane.showMessageDialog(null, "Error: Task not found.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error loading task: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (dbc != null && dbc.connect != null && !dbc.connect.isClosed()) dbc.connect.close();
            } catch (SQLException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
            //print per = new printer();
           // p.setVisible(true);
            // parent = (JFrame) SwingUtilities.getWindowAncestor(this);
           // parent.dispose();
        }
    }//GEN-LAST:event_printActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton print;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    public javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
