/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import Admin.*;
import CrudsAdmin.crud_users;
import config.Session;
import java.awt.Color;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import config.dbConnector;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author SCC-COLLEGE
 */
public class Pendingpage extends javax.swing.JInternalFrame {

    /**
     * Creates new form Userpage
     */
    public Pendingpage() {
        initComponents();
        
        displayData();

        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);

        searchBar.setOpaque(false);
        searchBar.setBackground(new Color(0, 0, 0, 0));
    }

    public void displayData() {
    dbConnector dbc = null;
    ResultSet rs = null;
    PreparedStatement pst = null;
    try {
        dbc = new dbConnector();

        String sql = "SELECT t.t_id, p.p_name, u.u_fname AS assigned_user, p.p_date, p.p_duedate, t.t_status, t.accept " +
             "FROM tbl_task t " +
             "JOIN tbl_project p ON t.p_id = p.p_id " +
             "LEFT JOIN tbl_users u ON t.user_assign = u.u_id " +
             "WHERE t.accept IS NULL OR t.accept = 'Pending' OR t.accept = 'Declined'";

        pst = dbc.connect.prepareStatement(sql);
        rs = pst.executeQuery();

        taskTable.setModel(DbUtils.resultSetToTableModel(rs));

        // Disable auto resize for horizontal scroll
        taskTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

        // Set preferred widths for columns for better horizontal scrolling
        int[] columnWidths = {80, 150, 120, 100, 100, 100, 90};
        for (int i = 0; i < columnWidths.length; i++) {
            if (i < taskTable.getColumnModel().getColumnCount()) {
                taskTable.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
            }
        }

        // Set header names explicitly
        taskTable.getColumnModel().getColumn(0).setHeaderValue("Task ID");
        taskTable.getColumnModel().getColumn(1).setHeaderValue("Project Name");
        taskTable.getColumnModel().getColumn(2).setHeaderValue("Assigned User");
        taskTable.getColumnModel().getColumn(3).setHeaderValue("Project Start Date");
        taskTable.getColumnModel().getColumn(4).setHeaderValue("Project Due Date");
        taskTable.getColumnModel().getColumn(5).setHeaderValue("Task Status");
        taskTable.getColumnModel().getColumn(6).setHeaderValue("Acceptance");

        taskTable.getTableHeader().repaint();

        // Make sure the table is inside the scroll pane (usually done in initComponents)
        if (taskTable.getParent() == null) {
            jScrollPane1.setViewportView(taskTable);
        }

    } catch (SQLException ex) {
        System.out.println("Errors: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (dbc != null && dbc.connect != null && !dbc.connect.isClosed()) dbc.connect.close();
        } catch (SQLException e) {
            System.out.println("Error closing resources: " + e.getMessage());
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        decline = new javax.swing.JButton();
        accept = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchBar.setMinimumSize(new java.awt.Dimension(8, 20));
        searchBar.setPreferredSize(new java.awt.Dimension(8, 20));
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        jPanel1.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 200, 23));

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, -1, 20));

        decline.setText("Decline");
        decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineActionPerformed(evt);
            }
        });
        jPanel1.add(decline, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 100, -1));

        accept.setText("Accept");
        accept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptActionPerformed(evt);
            }
        });
        jPanel1.add(accept, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 90, -1));

        taskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(taskTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 520, 250));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("Pending Task Page");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Untitled Project.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 380));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarActionPerformed

    private void acceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptActionPerformed
    int selectedRow = taskTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a task to accept.");
        return;
    }

    int taskId = (int) taskTable.getValueAt(selectedRow, 0);

    // Get the current logged-in user's ID from session
    Session sess = Session.getInstance();
    int currentUserId = sess.getU_id();  // ✅ Use user ID for database update

    dbConnector dbc = new dbConnector();

    // Step 1: Check if the task is already accepted
    String checkQuery = "SELECT accept FROM tbl_task WHERE t_id = ?";
    try (PreparedStatement checkPst = dbc.connect.prepareStatement(checkQuery)) {
        checkPst.setInt(1, taskId);
        ResultSet rs = checkPst.executeQuery();

        if (rs.next()) {
            String acceptStatus = rs.getString("accept");
            if ("Accepted".equalsIgnoreCase(acceptStatus)) {
                JOptionPane.showMessageDialog(null, "This task has already been accepted.");
                return;
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Step 2: Accept the task and assign the user using their user ID
    String updateQuery = "UPDATE tbl_task SET accept = 'Accepted', user_assign = ? WHERE t_id = ?";
    try (PreparedStatement pst = dbc.connect.prepareStatement(updateQuery)) {
        pst.setInt(1, currentUserId); // ✅ Set user_assign as INT
        pst.setInt(2, taskId);
        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            accept.setText("Accepted");
            accept.setEnabled(false);  // Disable the button after acceptance
            JOptionPane.showMessageDialog(null, "Task accepted successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Error accepting task.");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        displayData(); // Refresh the table
        try {
            if (dbc.connect != null && !dbc.connect.isClosed()) {
                dbc.connect.close();
            }
        } catch (SQLException e) {
            System.out.println("Error closing connection: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_acceptActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String keyword = searchBar.getText().trim();

    try {
        dbConnector dbc = new dbConnector();
        String query = "SELECT u_id, p_id, t_id, u_fname, p_name, user_assign FROM tbl_task " +
                       "WHERE u_fname LIKE '%" + keyword + "%' " +
                       "OR p_name LIKE '%" + keyword + "%' " +
                       "OR t_id LIKE '%" + keyword + "%' " +
                        "OR user_assign LIKE '%" + keyword + "%' " +
                       "OR p_id LIKE '%" + keyword + "%'";
        ResultSet rs = dbc.getData(query);

        if (!rs.isBeforeFirst()) {
            javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
            model.setColumnIdentifiers(new String[]{"Message"});
            model.addRow(new Object[]{"No results found for \"" + keyword + "\""});
            taskTable.setModel(model);
        } else {
            // Show search results
            taskTable.setModel(DbUtils.resultSetToTableModel(rs));
        }

    } catch (SQLException ex) {
        javax.swing.JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void declineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineActionPerformed
int selectedRow = taskTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a task to decline.");
        return;
    }

    int taskId = (int) taskTable.getValueAt(selectedRow, 0);
    Session sess = Session.getInstance();
    int currentUserId = sess.getU_id();
    dbConnector dbc = new dbConnector();

    // Step 1: Check if the task is accepted and assigned to current user
    String checkQuery = "SELECT accept, user_assign FROM tbl_task WHERE t_id = ?";

    try (PreparedStatement checkPst = dbc.connect.prepareStatement(checkQuery)) {
        checkPst.setInt(1, taskId);
        ResultSet rs = checkPst.executeQuery();

        if (rs.next()) {
            String acceptStatus = rs.getString("accept");
            int assignedUserId = rs.getInt("user_assign");

            if (!"Accepted".equalsIgnoreCase(acceptStatus)) {
                JOptionPane.showMessageDialog(null, "Only accepted tasks can be declined.");
                return;
            }

            if (assignedUserId != currentUserId) {
                JOptionPane.showMessageDialog(null, "You can only decline tasks assigned to you.");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Task not found.");
            return;
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Step 2: Update accept to 'Declined' and clear assigned user
    String updateQuery = "UPDATE tbl_task SET accept = 'Declined', user_assign = NULL WHERE t_id = ?";

    try (PreparedStatement pst = dbc.connect.prepareStatement(updateQuery)) {
        pst.setInt(1, taskId);
        int rowsAffected = pst.executeUpdate();

        if (rowsAffected > 0) {
            decline.setText("Declined");
            decline.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Task declined successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "Error declining task.");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        displayData();
        try {
            if (dbc.connect != null && !dbc.connect.isClosed()) {
                dbc.connect.close();
            }
        } catch (SQLException e) {
            System.out.println("Error closing connection: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_declineActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accept;
    private javax.swing.JButton decline;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    public javax.swing.JTable taskTable;
    // End of variables declaration//GEN-END:variables
}
