/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package User;

import Admin.*;
import CrudsAdmin.crud_project;
import CrudsAdmin.crud_tasks;
import CrudsAdmin.crud_users;
import config.Session;
import java.awt.Color;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import config.dbConnector;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author SCC-COLLEGE
 */
public class Taskpageuser extends javax.swing.JInternalFrame {

    /**
     * Creates new form Userpage
     */
    public Taskpageuser() {
        initComponents();
        
        displayData();
        
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        
        searchBar.setOpaque(false);
        searchBar.setBackground(new Color(0,0,0,0));
    }
    
    public void displayData() {
    dbConnector dbc = null;
    ResultSet rs = null;

    try {
        dbc = new dbConnector();

        // Get user ID from session
        int currentUserId = Session.getInstance().getU_id();

        String sql = "SELECT t.t_id, p.p_name, p.p_salary, p.p_description, u.u_fname AS maker_name, " +
                     "assignee.u_fname AS assign_user, p.p_date, p.p_duedate, t.t_status " +
                     "FROM tbl_task t " +
                     "JOIN tbl_project p ON t.p_id = p.p_id " +
                     "JOIN tbl_users u ON t.u_id = u.u_id " +
                     "LEFT JOIN tbl_users assignee ON t.user_assign = assignee.u_id " +
                     "WHERE t.user_assign = " + currentUserId;

        rs = dbc.getData(sql);
        userTable.setModel(DbUtils.resultSetToTableModel(rs));

        // Set column headers
        String[] headers = {
            "Task ID", "Project Name", "Salary", "Description", "Maker Name",
            "Assigned User", "Start Date", "Due Date", "Status"
        };

        for (int i = 0; i < headers.length; i++) {
            if (i < userTable.getColumnModel().getColumnCount()) {
                userTable.getColumnModel().getColumn(i).setHeaderValue(headers[i]);
            }
        }

        // Scrollbar settings
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);

        // Column width settings
        userTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        int[] columnWidths = {60, 120, 80, 150, 100, 120, 90, 90, 100};
        for (int i = 0; i < columnWidths.length; i++) {
            if (i < userTable.getColumnModel().getColumnCount()) {
                userTable.getColumnModel().getColumn(i).setPreferredWidth(columnWidths[i]);
            }
        }

        userTable.getTableHeader().repaint();

    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (dbc != null && dbc.connect != null && !dbc.connect.isClosed()) dbc.connect.close();
        } catch (SQLException e) {
            System.out.println("Error closing resources: " + e.getMessage());
        }
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        editbutton = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        jPanel1.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, -1, -1));

        editbutton.setText("EDIT");
        editbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbuttonActionPerformed(evt);
            }
        });
        jPanel1.add(editbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        searchBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchBar.setMinimumSize(new java.awt.Dimension(8, 20));
        searchBar.setPreferredSize(new java.awt.Dimension(8, 20));
        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        jPanel1.add(searchBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 240, 23));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 520, 250));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel2.setText("TASK PAGE");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        back.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        back.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        back.setText(" BACK ");
        back.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        jPanel1.add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Untitled Project.jpg"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 380));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        searchButtonActionPerformed(evt);
    }//GEN-LAST:event_searchBarActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
                String keyword = searchBar.getText().trim();
        if(keyword.isEmpty()){
            displayData(); // Show all if search is empty
            return;
        }
        try {
            dbConnector dbc = new dbConnector();
            // Properly join tables for search on related columns
            String query = "SELECT t.t_id, p.p_name, p.p_description, u.u_fname, t.user_assign, t.t_date, t.t_duedate, t.t_status " +
                           "FROM tbl_task t " +
                           "JOIN tbl_project p ON t.p_id = p.p_id " +
                           "JOIN tbl_users u ON t.u_id = u.u_id " +
                           "WHERE u.u_fname LIKE ? " +
                           "OR p.p_name LIKE ? " +
                           "OR t.t_id LIKE ? " +
                           "OR t.user_assign LIKE ? " +
                           "OR p.p_id LIKE ?";

            PreparedStatement pst = dbc.connect.prepareStatement(query);
            String likeKeyword = "%" + keyword + "%";
            for (int i = 1; i <= 5; i++) {
                pst.setString(i, likeKeyword);
            }
            ResultSet rs = pst.executeQuery();

            if (!rs.isBeforeFirst()) {
                javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
                model.setColumnIdentifiers(new String[]{"Message"});
                model.addRow(new Object[]{"No results found for \"" + keyword + "\""});
                userTable.setModel(model);
            } else {
                userTable.setModel(DbUtils.resultSetToTableModel(rs));
                // Reset headers after search too
                userTable.getColumnModel().getColumn(0).setHeaderValue("Task ID");
                userTable.getColumnModel().getColumn(1).setHeaderValue("Project Name");
                userTable.getColumnModel().getColumn(2).setHeaderValue("Description");
                userTable.getColumnModel().getColumn(3).setHeaderValue("Maker Name");
                userTable.getColumnModel().getColumn(4).setHeaderValue("Assign User");
                userTable.getColumnModel().getColumn(5).setHeaderValue("Start Date");
                userTable.getColumnModel().getColumn(6).setHeaderValue("Due Date");
                userTable.getColumnModel().getColumn(7).setHeaderValue("Status");
                userTable.getTableHeader().repaint();
            }
            rs.close();
            pst.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void editbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbuttonActionPerformed
     int rowIndex = userTable.getSelectedRow();
if (rowIndex < 0) {
    JOptionPane.showMessageDialog(null, "Please select a task to edit.");
    return;
}

try {
    TableModel model = userTable.getModel();
    int taskIdToEdit = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());
    System.out.println("Task ID selected for edit: " + taskIdToEdit);

    dbConnector dbc = new dbConnector();

    String sql = "SELECT t.*, p.p_name, p.p_salary, p.p_date, p.p_duedate, " +
                 "u.u_fname AS maker_name, u.u_id AS maker_id " +
                 "FROM tbl_task t " +
                 "JOIN tbl_project p ON t.p_id = p.p_id " +
                 "JOIN tbl_users u ON t.u_id = u.u_id " + // project maker
                 "WHERE t.t_id = ?";
    PreparedStatement pst = dbc.connect.prepareStatement(sql);
    pst.setInt(1, taskIdToEdit);
    ResultSet rs = pst.executeQuery();

    if (rs.next()) {
        crud_task at = new crud_task();

        String projectName = rs.getString("p_name");
        int assignId = rs.getInt("user_assign");
        String projectSalary = rs.getString("p_salary");
        String taskStatus = rs.getString("t_status");
        java.util.Date startDate = rs.getDate("p_date");
        java.util.Date dueDate = rs.getDate("p_duedate");
        String makerName = rs.getString("maker_name");
        int makerId = rs.getInt("maker_id");

        int currentUserId = Session.getInstance().getU_id();

        if (makerId == currentUserId) {
            JOptionPane.showMessageDialog(null, "You cannot edit a task where you are the project maker.");
            rs.close();
            pst.close();
            dbc.connect.close();
            return;
        }

        // Load projects
        at.loadProjectNames();

        // Load users into assign combo box
        at.assignuser.removeAllItems();
        String selectedUserName = null;

        String userQuery = "SELECT u_id, u_fname FROM tbl_users";
        PreparedStatement pstUsers = dbc.connect.prepareStatement(userQuery);
        ResultSet rsUsers = pstUsers.executeQuery();

        while (rsUsers.next()) {
            int uid = rsUsers.getInt("u_id");
            String uname = rsUsers.getString("u_fname");
            at.assignuser.addItem(uname);

            if (uid == assignId) {
                selectedUserName = uname;
            }
        }

        rsUsers.close();
        pstUsers.close();

        if (selectedUserName != null) {
            at.assignuser.setSelectedItem(selectedUserName);
        }

        // Set form values
        at.salary.setText(projectSalary);
        at.umaker.setText(makerName);
        at.umaker.setEnabled(false);
        at.date.setDate(startDate);
        at.due.setDate(dueDate);
        at.status.setSelectedItem(taskStatus);
        at.t_id.setText(String.valueOf(taskIdToEdit));
        at.t_id.setEnabled(false);
        at.pname.setSelectedItem(projectName);
        at.pname.setEnabled(false);
        at.assignuser.setSelectedItem(selectedUserName);
        at.assignuser.setEnabled(false);

        // ✅ Set maker ID into the hidden field
        at.user_id.setText(String.valueOf(makerId));
        at.user_id.setEnabled(false); // optional to avoid user editing

        at.update.setEnabled(true);

        at.setVisible(true);

        // Close current window
        JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);
        parent.dispose();

    } else {
        JOptionPane.showMessageDialog(null, "Error: Task not found.");
    }

    rs.close();
    pst.close();
    dbc.connect.close();

} catch (SQLException | NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Error loading task: " + ex.getMessage());
    ex.printStackTrace();
}

    }//GEN-LAST:event_editbuttonActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        UserDashboard ads = new UserDashboard();
            ads.setVisible(true);
            setting tp = new setting();
            tp.setVisible(true);
            ads.mainDesktop.add(tp);
            JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);
        parent.dispose();
    }//GEN-LAST:event_backMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JButton editbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    public javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
